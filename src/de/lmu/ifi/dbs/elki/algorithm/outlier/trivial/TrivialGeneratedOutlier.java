package de.lmu.ifi.dbs.elki.algorithm.outlier.trivial;

import java.util.HashSet;
import java.util.regex.Pattern;

import de.lmu.ifi.dbs.elki.algorithm.AbstractAlgorithm;
import de.lmu.ifi.dbs.elki.algorithm.outlier.OutlierAlgorithm;
import de.lmu.ifi.dbs.elki.data.NumberVector;
import de.lmu.ifi.dbs.elki.data.model.GeneratorModel;
import de.lmu.ifi.dbs.elki.data.model.Model;
import de.lmu.ifi.dbs.elki.data.type.NoSupportedDataTypeException;
import de.lmu.ifi.dbs.elki.data.type.SimpleTypeInformation;
import de.lmu.ifi.dbs.elki.data.type.TypeInformation;
import de.lmu.ifi.dbs.elki.data.type.TypeUtil;
import de.lmu.ifi.dbs.elki.database.Database;
import de.lmu.ifi.dbs.elki.database.datastore.DataStoreFactory;
import de.lmu.ifi.dbs.elki.database.datastore.DataStoreUtil;
import de.lmu.ifi.dbs.elki.database.datastore.WritableDataStore;
import de.lmu.ifi.dbs.elki.database.ids.DBID;
import de.lmu.ifi.dbs.elki.database.relation.MaterializedRelation;
import de.lmu.ifi.dbs.elki.database.relation.Relation;
import de.lmu.ifi.dbs.elki.logging.Logging;
import de.lmu.ifi.dbs.elki.math.linearalgebra.Vector;
import de.lmu.ifi.dbs.elki.math.statistics.distribution.ChiSquaredDistribution;
import de.lmu.ifi.dbs.elki.math.statistics.distribution.Distribution;
import de.lmu.ifi.dbs.elki.math.statistics.distribution.NormalDistribution;
import de.lmu.ifi.dbs.elki.result.outlier.OutlierResult;
import de.lmu.ifi.dbs.elki.result.outlier.OutlierScoreMeta;
import de.lmu.ifi.dbs.elki.result.outlier.ProbabilisticOutlierScore;

/**
 * Extract outlier score from the model the objects were generated by.
 * 
 * This algorithm can only be applied to data that was freshly generated, to the
 * generator model information is still available.
 * 
 * @author Erich Schubert
 */
public class TrivialGeneratedOutlier extends AbstractAlgorithm<OutlierResult> implements OutlierAlgorithm {
  /**
   * Class logger
   */
  private static final Logging logger = Logging.getLogger(TrivialGeneratedOutlier.class);

  /**
   * The pattern we match with.
   */
  final Pattern pattern;

  /**
   * Constructor.
   * 
   * @param pattern Pattern to match with.
   */
  public TrivialGeneratedOutlier(Pattern pattern) {
    super();
    this.pattern = pattern;
  }

  /**
   * Constructor.
   */
  public TrivialGeneratedOutlier() {
    this(Pattern.compile(ByLabelOutlier.DEFAULT_PATTERN));
  }

  @Override
  public TypeInformation[] getInputTypeRestriction() {
    return TypeUtil.array(TypeUtil.NUMBER_VECTOR_FIELD, new SimpleTypeInformation<Model>(Model.class), TypeUtil.GUESSED_LABEL);
  }

  @Override
  public OutlierResult run(Database database) throws IllegalStateException {
    Relation<NumberVector<?, ?>> vecs = database.getRelation(TypeUtil.NUMBER_VECTOR_FIELD);
    Relation<Model> models = database.getRelation(new SimpleTypeInformation<Model>(Model.class));
    // Prefer a true class label
    try {
      Relation<?> relation = database.getRelation(TypeUtil.CLASSLABEL);
      return run(models, vecs, relation);
    }
    catch(NoSupportedDataTypeException e) {
      // Otherwise, try any labellike.
      return run(models, vecs, database.getRelation(TypeUtil.GUESSED_LABEL));
    }
  }

  /**
   * Run the algorithm
   * 
   * @param models Model relation
   * @param vecs Vector relation
   * @param labels Label relation
   * @return Outlier result
   */
  public OutlierResult run(Relation<Model> models, Relation<NumberVector<?, ?>> vecs, Relation<?> labels) {
    WritableDataStore<Double> scores = DataStoreUtil.makeStorage(models.getDBIDs(), DataStoreFactory.HINT_HOT, Double.class);

    HashSet<GeneratorModel> generators = new HashSet<GeneratorModel>();
    for(DBID id : models.iterDBIDs()) {
      Model model = models.get(id);
      if(model instanceof GeneratorModel) {
        generators.add((GeneratorModel) model);
      }
    }
    if(generators.size() == 0) {
      logger.warning("No generator models found for dataset - all points will be considered outliers.");
    }

    for(DBID id : models.iterDBIDs()) {
      double score = 1.0;
      // Convert to a math vector
      Vector v = vecs.get(id).getColumnVector();
      for(GeneratorModel gen : generators) {
        Vector tv = v;
        // Transform backwards
        if(gen.getTransform() != null) {
          tv = gen.getTransform().applyInverse(v);
        }
        final int dim = tv.getDimensionality();
        double lensq = 0.0;
        int norm = 0;
        for(int i = 0; i < dim; i++) {
          Distribution dist = gen.getDistribution(i);
          if(dist instanceof NormalDistribution) {
            NormalDistribution d = (NormalDistribution) dist;
            double delta = (tv.get(i) - d.getMean()) / d.getStddev();
            lensq += delta * delta;
            norm += 1;
          }
        }
        if(norm > 0) {
          // The squared distances are ChiSquared distributed
          score = Math.min(score, ChiSquaredDistribution.cdf(lensq, norm));
        }
        // Estimate probability
        // double like = 1.0;
        // for(int i = 0; i < tv.getDimensionality(); i++) {
        // like *= gen.getDistribution(i).pdf(tv.get(i));
        // }
        // Adjust for dimensionaliy - geometric mean
        // like = Math.pow(like, 1. / tv.getDimensionality());
        // if (like > 0) {
        // score = Math.min(score, (2 / like) / (like + 1 / like));
        // }
      }
      scores.put(id, score);
    }
    Relation<Double> scoreres = new MaterializedRelation<Double>("Model outlier scores", "model-outlier", TypeUtil.DOUBLE, scores, models.getDBIDs());
    OutlierScoreMeta meta = new ProbabilisticOutlierScore(0., 1.);
    return new OutlierResult(meta, scoreres);
  }

  @Override
  protected Logging getLogger() {
    return logger;
  }
}
