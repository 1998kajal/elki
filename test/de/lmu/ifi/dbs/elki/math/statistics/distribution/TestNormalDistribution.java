package de.lmu.ifi.dbs.elki.math.statistics.distribution;

/*
 This file is part of ELKI:
 Environment for Developing KDD-Applications Supported by Index-Structures

 Copyright (C) 2012
 Ludwig-Maximilians-Universität München
 Lehr- und Forschungseinheit für Datenbanksysteme
 ELKI Development Team

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import static org.junit.Assert.*;

import org.junit.Test;

import de.lmu.ifi.dbs.elki.JUnit4Test;

/**
 * Unit test for the Normal distribution in ELKI.
 * 
 * The reference values were computed using GNU R and SciPy.
 * 
 * @author Erich Schubert
 */
public class TestNormalDistribution implements JUnit4Test {
  public static final double[] P_PROBIT = { //
  0.0001, 0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99, 0.999, 0.9999 //
  };

  public static final double[] SCIPY_NORM_PROBIT_0_1 = { //
  -3.71901648545568042081299608980771154165267944335938e+00, // 0.000100
  -3.09023230616781319213259848766028881072998046875000e+00, // 0.001000
  -2.32634787404084075745913651189766824245452880859375e+00, // 0.010000
  -1.28155156554460036844034220848698168992996215820312e+00, // 0.100000
  -6.74489750196081816469018122006673365831375122070312e-01, // 0.250000
  0.00000000000000000000000000000000000000000000000000e+00, // 0.500000
  6.74489750196081816469018122006673365831375122070312e-01, // 0.750000
  1.28155156554460036844034220848698168992996215820312e+00, // 0.900000
  2.32634787404084075745913651189766824245452880859375e+00, // 0.990000
  3.09023230616781319213259848766028881072998046875000e+00, // 0.999000
  3.71901648545570839843321664375253021717071533203125e+00, // 0.999900
  };

  public static final double[] GNUR_NORM_PROBIT_0_1 = { //
  -3.71901648545567997672378623974509537220001220703125e+00, // 0.000100
  -3.09023230616781319213259848766028881072998046875000e+00, // 0.001000
  -2.32634787404084075745913651189766824245452880859375e+00, // 0.010000
  -1.28155156554460036844034220848698168992996215820312e+00, // 0.100000
  -6.74489750196081705446715659491019323468208312988281e-01, // 0.250000
  0.00000000000000000000000000000000000000000000000000e+00, // 0.500000
  6.74489750196081705446715659491019323468208312988281e-01, // 0.750000
  1.28155156554460059048494713351828977465629577636719e+00, // 0.900000
  2.32634787404084075745913651189766824245452880859375e+00, // 0.990000
  3.09023230616781274804338863759767264127731323242188e+00, // 0.999000
  3.71901648545570839843321664375253021717071533203125e+00, // 0.999900
  };

  public static final double[] SCIPY_NORM_PROBIT_1_3 = { //
  -1.01570494563670408183497784193605184555053710937500e+01, // 0.000100
  -8.27069691850343957639779546298086643218994140625000e+00, // 0.001000
  -5.97904362212252227237740953569300472736358642578125e+00, // 0.010000
  -2.84465469663380110532102662546094506978988647460938e+00, // 0.100000
  -1.02346925058824567145165929105132818222045898437500e+00, // 0.250000
  1.00000000000000000000000000000000000000000000000000e+00, // 0.500000
  3.02346925058824567145165929105132818222045898437500e+00, // 0.750000
  4.84465469663380154941023647552356123924255371093750e+00, // 0.900000
  7.97904362212252227237740953569300472736358642578125e+00, // 0.990000
  1.02706969185034395763977954629808664321899414062500e+01, // 0.999000
  1.21570494563671260834780696313828229904174804687500e+01, // 0.999900
  };

  public static final double[] GNUR_NORM_PROBIT_1_3 = { //
  -1.01570494563670408183497784193605184555053710937500e+01, // 0.000100
  -8.27069691850343957639779546298086643218994140625000e+00, // 0.001000
  -5.97904362212252227237740953569300472736358642578125e+00, // 0.010000
  -2.84465469663380110532102662546094506978988647460938e+00, // 0.100000
  -1.02346925058824500531784451595740392804145812988281e+00, // 0.250000
  1.00000000000000000000000000000000000000000000000000e+00, // 0.500000
  3.02346925058824522736244944098871201276779174804688e+00, // 0.750000
  4.84465469663380154941023647552356123924255371093750e+00, // 0.900000
  7.97904362212252227237740953569300472736358642578125e+00, // 0.990000
  1.02706969185034395763977954629808664321899414062500e+01, // 0.999000
  1.21570494563671243071212302311323583126068115234375e+01, // 0.999900
  };

  public static final double[] SCIPY_NORM_PROBIT_01_01 = { //
  -2.71901648545568086490220593987032771110534667968750e-01, // 0.000100
  -2.09023230616781324764374971891811583191156387329102e-01, // 0.001000
  -1.32634787404084075745913651189766824245452880859375e-01, // 0.010000
  -2.81551565544600479462644671002635732293128967285156e-02, // 0.100000
  3.25510249803918211286557493622240144759416580200195e-02, // 0.250000
  1.00000000000000005551115123125782702118158340454102e-01, // 0.500000
  1.67448975019608203851362304703798145055770874023438e-01, // 0.750000
  2.28155156554460059048494713351828977465629577636719e-01, // 0.900000
  3.32634787404084086848143897441332228481769561767578e-01, // 0.990000
  4.09023230616781363622180833772290498018264770507812e-01, // 0.999000
  4.71901648545570817638861171872122213244438171386719e-01, // 0.999900
  };

  public static final double[] GNUR_NORM_PROBIT_01_01 = { //
  -2.71901648545568030979069362729205749928951263427734e-01, // 0.000100
  -2.09023230616781324764374971891811583191156387329102e-01, // 0.001000
  -1.32634787404084075745913651189766824245452880859375e-01, // 0.010000
  -2.81551565544600410073705631930351955816149711608887e-02, // 0.100000
  3.25510249803918350064435571766807697713375091552734e-02, // 0.250000
  1.00000000000000005551115123125782702118158340454102e-01, // 0.500000
  1.67448975019608176095786689074884634464979171752930e-01, // 0.750000
  2.28155156554460059048494713351828977465629577636719e-01, // 0.900000
  3.32634787404084086848143897441332228481769561767578e-01, // 0.990000
  4.09023230616781308111029602514463476836681365966797e-01, // 0.999000
  4.71901648545570873150012403129949234426021575927734e-01, // 0.999900
  };

  @Test
  public void testProbit() {
    // TODO: improve our implementation, to get more significant digits!
    checkProbit(0., 1., P_PROBIT, SCIPY_NORM_PROBIT_0_1, 1e-8);
    checkProbit(1., 3., P_PROBIT, SCIPY_NORM_PROBIT_1_3, 1e-9);
    checkProbit(.1, .1, P_PROBIT, SCIPY_NORM_PROBIT_01_01, 1e-9);
    checkProbit(0., 1., P_PROBIT, GNUR_NORM_PROBIT_0_1, 1e-8);
    checkProbit(1., 3., P_PROBIT, GNUR_NORM_PROBIT_1_3, 1e-9);
    checkProbit(.1, .1, P_PROBIT, GNUR_NORM_PROBIT_01_01, 1e-9);
  }

  private void checkProbit(double mean, double var, double[] x, double[] expected, double err) {
    NormalDistribution d = new NormalDistribution(mean, var);
    for(int i = 0; i < x.length; i++) {
      double val = d.probit(x[i]);
      if(val == expected[i]) {
        continue;
      }
      double diff = Math.abs(val - expected[i]);
      if(diff < err || diff / expected[i] < err) {
        continue;
      }
      final int errlev = (int) Math.ceil(Math.log(diff / expected[i]) / Math.log(10));
      assertEquals("Error magnitude: 1e" + errlev, expected[i], val, err);
      // System.err.println(mean+" "+var+" "+errlev);
    }
  }
}