package de.lmu.ifi.dbs.elki.math.statistics.distribution;

/*
 This file is part of ELKI:
 Environment for Developing KDD-Applications Supported by Index-Structures

 Copyright (C) 2012
 Ludwig-Maximilians-Universität München
 Lehr- und Forschungseinheit für Datenbanksysteme
 ELKI Development Team

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import static org.junit.Assert.*;

import org.junit.Test;

import de.lmu.ifi.dbs.elki.JUnit4Test;

/**
 * Unit test for the Gamma distribution in ELKI.
 * 
 * Many of the test values were taken from Apache Commons Math unit tests, as
 * they seem to cover typical situations.
 * 
 * @author Erich Schubert
 */
public class TestGammaDistribution implements JUnit4Test {
  @Test
  public void testGammaCDF() {
    GammaDistribution dist = new GammaDistribution(2., .25);

    double[] x = new double[] { 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900 };
    // Quantiles computed using SciPy
    double[] q = new double[] { 7.978698632561770525176668422684400638900115154683589935302734375e-06, 7.7898328158386236606813834981721811345778405666351318359375e-04, 4.678840160444473761369721387382014654576778411865234375e-03, 1.7523096306421771795047703790260129608213901519775390625e-02, 6.1551935550104998340348316787640214897692203521728515625e-02, 9.081283153678469943770323880016803741455078125e-01, 9.0544695311360623435348315979354083538055419921875e-01, 9.008146339155584936264631323865614831447601318359375e-01, 8.926202950904051913738612711313180625438690185546875e-01, 8.7431087674245422380892023284104652702808380126953125e-01 };

    assertEquals("Testdata inconsistent!", x.length, q.length);

    double[] r = new double[x.length];
    for(int i = 0; i < x.length; i++) {
      r[i] = dist.cdf(x[i]);
    }
    assertArrayEquals("CDF values do not agree.", q, r, 1E-9);
  }

  @Test
  public void testGammaPDF() {
    // Fact
    checkDensity(1, 1, new double[] { -0.1 }, 0., new double[] { 0. });

    double[] x = new double[] { 1e-6, 0.5, 1, 2, 5 };
    // Compare to R:
    double rprec = 1e-10;
    // R2.5: print(dgamma(x, shape=1, rate=1), digits=22)
    checkDensity(1, 1, x, rprec, new double[] { 0.999999000000500015694627, 0.606530659712633424263117, 0.367879441171442334024277, 0.135335283236612702317814, 0.006737946999085467000845 });
    // R2.5: print(dgamma(x, shape=2, rate=1), digits=22)
    checkDensity(2, 1, x, rprec, new double[] { 9.999990000005007353745e-07, 3.032653298563167121316e-01, 3.678794411714423340243e-01, 2.706705664732254046356e-01, 3.368973499542733673895e-02 });
    // R2.5: print(dgamma(x, shape=4, rate=1), digits=22)
    checkDensity(4, 1, x, rprec, new double[] { 1.666665000000829403752e-19, 1.263605541067986358372e-02, 6.131324019524039131701e-02, 1.804470443154836400979e-01, 1.403738958142806136919e-01 });
    // R2.5: print(dgamma(x, shape=4, rate=10), digits=22)
    checkDensity(4, 10, x, rprec, new double[] { 1.666650000083330704830e-15, 1.403738958142806136919e+00, 7.566654960414147257364e-02, 2.748204829918078861929e-05, 4.018228849924835363352e-17 });
    // R2.5: print(dgamma(x, shape=.1, rate=10), digits=22)
    checkDensity(0.1, 10, x, rprec, new double[] { 3.323953832499025156721e+04, 1.663849009920152820577e-03, 6.007786726199894502100e-06, 1.461647647358158251307e-10, 5.996008322401351848641e-24 });
    // R2.5: print(dgamma(x, shape=.1, rate=20), digits=22)
    checkDensity(0.1, 20, x, rprec, new double[] { 3.562489883291303704027e+04, 1.201557345239978900420e-05, 2.923295294716316502614e-10, 3.228910842819033455040e-19, 1.239484588982581238066e-45 });
    // R2.5: print(dgamma(x, shape=.1, rate=4), digits=22)
    checkDensity(0.1, 4, x, rprec, new double[] { 3.032938387848289858084e+04, 3.049322494123417673362e-02, 2.211502311093181769724e-03, 2.170613370534063449151e-05, 5.846590589432632746734e-11 });
    // R2.5: print(dgamma(x, shape=.1, rate=1), digits=22)
    checkDensity(0.1, 1, x, rprec, new double[] { 2.640334142974315182073e+04, 1.189704436712996082903e-01, 3.866916944030238112440e-02, 7.623306235308544183404e-03, 1.663849009920152874787e-04 });

    // Compare to SciPy. We seem to be slightly closer here.
    double sprec = 1e-11;
    // SciPy: scipy.stats.gamma.pdf(x, 1, scale=1)
    checkDensity(1, 1, x, sprec, new double[] { 0.9999990000005000156946266542945522814989, 0.6065306597126334242631173765403218567371, 0.3678794411714423340242774429498240351677, 0.1353352832366127023178137278591748327017, 0.0067379469990854670008451066109955718275 });
    // SciPy: scipy.stats.gamma.pdf(x, 2, scale=1)
    checkDensity(2, 1, x, sprec, new double[] { 9.9999900000050115889094985016649630438224e-07, 3.0326532985631671213155868827016092836857e-01, 3.6787944117144233402427744294982403516769e-01, 2.7067056647322540463562745571834966540337e-01, 3.3689734995427336738949009031784953549504e-02 });
    // SciPy: scipy.stats.gamma.pdf(x, 4, scale=1)
    checkDensity(4, 1, x, sprec, new double[] { 1.6666650000008407185902795498312565830844e-19, 1.2636055410679865318446246646999497897923e-02, 6.1313240195240391317010875127380131743848e-02, 1.8044704431548355683112561109737725928426e-01, 1.4037389581428050266964646652922965586185e-01 });
    // SciPy: scipy.stats.gamma.pdf(x, 4, scale=.1)
    checkDensity(4, 10, x, sprec, new double[] { 1.6666500000833305076150329837580593211439e-15, 1.4037389581428050266964646652922965586185e+00, 7.5666549604141430940273949090624228119850e-02, 2.7482048299180785231156723402712316328689e-05, 4.0182288499248341307572205319201842464814e-17 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=.1)
    checkDensity(0.1, 10, x, sprec, new double[] { 3.3239538324990222463384270668029785156250e+04, 1.6638490099201526037364651244843116728589e-03, 6.0077867261998970431990073348682557252687e-06, 1.4616476473581587682949727001084161762123e-10, 5.9960083224013276040701882406618685420549e-24 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=.05)
    checkDensity(0.1, 20, x, sprec, new double[] { 3.5624898832913080696016550064086914062500e+04, 1.2015573452399794086398014669736511450537e-05, 2.9232952947163175365899454002168323524247e-10, 3.2289108428190170846350131604587708513477e-19, 1.2394845889826003738382963429888655907813e-45 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=.25)
    checkDensity(0.1, 4, x, sprec, new double[] { 3.0329383878482840373180806636810302734375e+04, 3.0493224941234166325276788711562403477728e-02, 2.2115023110931809023627092614106004475616e-03, 2.1706133705340624327111490043940023042524e-05, 5.8465905894326353316738322232548131021646e-11 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=1)
    checkDensity(0.1, 1, x, sprec, new double[] { 2.6403341429743133630836382508277893066406e+04, 1.1897044367129960829032597757759504020214e-01, 3.8669169440302374185502998216179548762739e-02, 7.6233062353085415813191971778906008694321e-03, 1.6638490099201526037364651244843116728589e-04 });
  }

  private void checkDensity(double alpha, double rate, double[] x, double prec, double[] expected) {
    GammaDistribution d = new GammaDistribution(alpha, rate);
    for(int i = 0; i < x.length; i++) {
      assertEquals(expected[i], d.pdf(x[i]), prec);
    }
  }

  @Test
  public void testGammaProbit() {
    // Fact
    checkProbit(1, 1, new double[] { 0, 1 }, 0., new double[] { 0., Double.POSITIVE_INFINITY });

    double[] x = new double[] { 0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99, 0.999 };
    // Compare to R:
    double rprec = 1e-13;
    // R2.5: print(qgamma(x, shape=1, rate=1), digits=22)
    checkProbit(1, 1, x, rprec, new double[] { 0.001000500333583533496204, 0.010050335853501441915614, 0.105360515657826309121603, 0.287682072451780956878764, 0.693147180559945286226764, 1.386294361119890572453528, 2.302585092994045901093614, 4.605170185988090914008808, 6.907755278982135926924002 });
    // R2.5: print(qgamma(x, shape=2, rate=1), digits=22)
    checkProbit(2, 1, x, rprec, new double[] { 0.04540201776948956519098, 0.14855474025326592668605, 0.53181160838961194503582, 0.96127876311477689075247, 1.67834699001666098894248, 2.69263452888969601062286, 3.88972016986742996635940, 6.63835206799381083442313, 9.23341347645158450063718 });
    // R2.5: print(qgamma(x, shape=4, rate=1), digits=22)
    checkProbit(4, 1, x, rprec, new double[] { 0.4285524136284231677685, 0.8232486863453851722028, 1.7447695628249113575237, 2.5353202119000930458981, 3.6720607488508969495911, 5.1094274851233789647154, 6.6807830682558639878721, 10.0451175148316149687844, 13.0622407791880679184260 });
    // R2.5: print(qgamma(x, shape=4, rate=10), digits=22)
    checkProbit(4, 10, x, rprec, new double[] { 0.04285524136284232094019, 0.08232486863453852832251, 0.17447695628249115795683, 0.25353202119000933789650, 0.36720607488508971716357, 0.51094274851233789647154, 0.66807830682558644319613, 1.00451175148316185214981, 1.30622407791880701388720 });
    // R2.5: print(qgamma(x, shape=.1, rate=10), digits=22)
    checkProbit(0.1, 10, x, rprec, new double[] { 6.073048362407940138686e-32, 6.073048362407920992842e-22, 6.073048362743168200221e-12, 5.791713294969602462745e-08, 5.933911044602256234116e-05, 3.530635807355833079291e-03, 2.661545537388376389543e-02, 1.588477817929507540651e-01, 3.363677011718753107061e-01 });
    // R2.5: print(qgamma(x, shape=.1, rate=20), digits=22)
    checkProbit(0.1, 20, x, rprec, new double[] { 3.036524181203970069343e-32, 3.036524181203960496421e-22, 3.036524181371584100110e-12, 2.895856647484801231372e-08, 2.966955522301128117058e-05, 1.765317903677916539645e-03, 1.330772768694188194771e-02, 7.942389089647537703254e-02, 1.681838505859376553531e-01 });
    // R2.5: print(qgamma(x, shape=.1, rate=4), digits=22)
    checkProbit(0.1, 4, x, rprec, new double[] { 1.518262090601984925195e-31, 1.518262090601980201191e-21, 1.518262090685791888496e-11, 1.447928323742400582599e-07, 1.483477761150563990766e-04, 8.826589518389582264546e-03, 6.653863843470940453440e-02, 3.971194544823768435293e-01, 8.409192529296882767653e-01 });
    // R2.5: print(qgamma(x, shape=.1, rate=1), digits=22)
    checkProbit(0.1, 1, x, rprec, new double[] { 6.073048362407939700780e-31, 6.073048362407920804763e-21, 6.073048362743167553986e-11, 5.791713294969602330396e-07, 5.933911044602255963065e-04, 3.530635807355832905818e-02, 2.661545537388376181376e-01, 1.588477817929507374117e+00, 3.363677011718753107061e+00 });

    // SciPy does not seem to do newtone refinements. The precision varies a
    // lot, down to 1e-3 for some parameters
    x = new double[] { 0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99 };
    double sprec = 1e-10; // When disabling newton refinements: 1e-14;
    // SciPy: scipy.stats.gamma.ppf(x, 1, scale=1)
    checkProbit(1, 1, x, sprec, new double[] { 1.0005003335835334962039544492995446489658e-03, 1.0050335853501440180890469378027773927897e-02, 1.0536051565782635075496642684811376966536e-01, 2.8768207245178095687876407282601576298475e-01, 6.9314718055994528622676398299518041312695e-01, 1.3862943611198907944981328910216689109802e+00, 2.3025850929940459010936137929093092679977e+00, 4.6051701859880900258303881855681538581848e+00 });
    // SciPy: scipy.stats.gamma.ppf(x, 2, scale=1)
    checkProbit(2, 1, x, sprec, new double[] { 0.0454020177694895443742950646992539986968, 0.148554740253265954441630469773372169584, 0.5318116083896119450358241920184809714556, 0.9612787631147771127970713678223546594381, 1.6783469900166607668978713263641111552715, 2.6926345288896955665336463425774127244949, 3.8897201698674290781809759209863841533661, 6.6383520679938108344231295632198452949524, });
    // SciPy: scipy.stats.gamma.ppf(x, 4, scale=1)
    checkProbit(4, 1, x, sprec, new double[] { 0.4285524136284229457238836857868591323495, 0.8232486863453851722027820869698189198971, 1.7447695628249113575236606266116723418236, 2.5353202119000930458980747062014415860176, 3.6720607488508965055018506973283365368843, 5.1094274851233798528937768423929810523987, 6.6807830682558648760505093378014862537384, 10.0451175148316167451412184163928031921387 });
  }

  private void checkProbit(double alpha, double rate, double[] x, double prec, double[] expected) {
    GammaDistribution d = new GammaDistribution(alpha, rate);
    for(int i = 0; i < x.length; i++) {
      assertEquals(expected[i], d.probit(x[i]), prec);
    }
  }
}