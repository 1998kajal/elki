package de.lmu.ifi.dbs.elki.math.statistics.distribution;

/*
 This file is part of ELKI:
 Environment for Developing KDD-Applications Supported by Index-Structures

 Copyright (C) 2012
 Ludwig-Maximilians-Universität München
 Lehr- und Forschungseinheit für Datenbanksysteme
 ELKI Development Team

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import static org.junit.Assert.*;

import org.junit.Test;

import de.lmu.ifi.dbs.elki.JUnit4Test;

/**
 * Unit test for the Gamma distribution in ELKI.
 * 
 * The reference values were computed using GNU R and SciPy.
 * 
 * @author Erich Schubert
 */
public class TestGammaDistribution implements JUnit4Test {
  public static final double[] P_PROBIT = { //
  0.0001, 0.001, 0.01, 0.1, 0.25, 0.5, 0.75, 0.9, 0.99, 0.999, 0.9999 //
  };

  public static final double[] SCIPY_GAMMA_PROBIT_1_1 = { //
  1.00005000333358370239768275755665172255248762667179e-04, // 0.000100
  1.00050033358353349620395444929954464896582067012787e-03, // 0.001000
  1.00503358535014367114435174244135851040482521057129e-02, // 0.010000
  1.05360515657826322999390811219200259074568748474121e-01, // 0.100000
  2.87682072451780956878764072826015762984752655029297e-01, // 0.250000
  6.93147180559945286226763982995180413126945495605469e-01, // 0.500000
  1.38629436111989079449813289102166891098022460937500e+00, // 0.750000
  2.30258509299404590109361379290930926799774169921875e+00, // 0.900000
  4.60517018598809002583038818556815385818481445312500e+00, // 0.990000
  6.90775527898213592692400197847746312618255615234375e+00, // 0.999000
  9.21034037197629196214165858691558241844177246093750e+00, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_1_1 = { //
  1.00005000333358343134713963618054322068928740918636e-04, // 0.000100
  1.00050033358353349620395444929954464896582067012787e-03, // 0.001000
  1.00503358535014419156139453548348683398216962814331e-02, // 0.010000
  1.05360515657826309121603003404743503779172897338867e-01, // 0.100000
  2.87682072451780901367612841568188741803169250488281e-01, // 0.250000
  6.93147180559945286226763982995180413126945495605469e-01, // 0.500000
  1.38629436111989057245352796599036082625389099121094e+00, // 0.750000
  2.30258509299404590109361379290930926799774169921875e+00, // 0.900000
  4.60517018598809002583038818556815385818481445312500e+00, // 0.990000
  6.90775527898213592692400197847746312618255615234375e+00, // 0.999000
  9.21034037197629196214165858691558241844177246093750e+00, // 0.999900
  };

  public static final double[] SCIPY_GAMMA_PROBIT_2_1 = { //
  1.42092376217775075153415542672519222833216190338135e-02, // 0.000100
  4.54020177694895513131889686064823763445019721984863e-02, // 0.001000
  1.48554740253265954441630469773372169584035873413086e-01, // 0.010000
  5.31811608389612056058126654534135013818740844726562e-01, // 0.100000
  9.61278763114777112797071367822354659438133239746094e-01, // 0.250000
  1.67834699001666076689787132636411115527153015136719e+00, // 0.500000
  2.69263452888969556653364634257741272449493408203125e+00, // 0.750000
  3.88972016986742952227018577104900032281875610351562e+00, // 0.900000
  6.63835206799381172260154926334507763385772705078125e+00, // 0.990000
  9.23341347645158450063718191813677549362182617187500e+00, // 0.999000
  1.17563712224955398966130815097130835056304931640625e+01, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_2_1 = { //
  1.42092376217774988417241743832164502236992120742798e-02, // 0.000100
  4.54020177694895721298706803281675092875957489013672e-02, // 0.001000
  1.48554740253265982197206085402285680174827575683594e-01, // 0.010000
  5.31811608389611945035824192018480971455574035644531e-01, // 0.100000
  9.61278763114777001774768905306700617074966430664062e-01, // 0.250000
  1.67834699001666054485326640133280307054519653320312e+00, // 0.500000
  2.69263452888969601062285619264002889394760131835938e+00, // 0.750000
  3.88972016986742952227018577104900032281875610351562e+00, // 0.900000
  6.63835206799381083442312956321984529495239257812500e+00, // 0.990000
  9.23341347645158450063718191813677549362182617187500e+00, // 0.999000
  1.17563712224955381202562421094626188278198242187500e+01, // 0.999900
  };

  public static final double[] SCIPY_GAMMA_PROBIT_4_1 = { //
  2.31796895172818012698101597379718441516160964965820e-01, // 0.000100
  4.28552413628422945723883685786859132349491119384766e-01, // 0.001000
  8.23248686345385172202782086969818919897079467773438e-01, // 0.010000
  1.74476956282491135752366062661167234182357788085938e+00, // 0.100000
  2.53532021190009304589807470620144158601760864257812e+00, // 0.250000
  3.67206074885089650550185069732833653688430786132812e+00, // 0.500000
  5.10942748512337985289377684239298105239868164062500e+00, // 0.750000
  6.68078306825586487605050933780148625373840332031250e+00, // 0.900000
  1.00451175148316167451412184163928031921386718750000e+01, // 0.990000
  1.30622407791880714711396649363450706005096435546875e+01, // 0.999000
  1.59138140006312944763067207532003521919250488281250e+01, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_4_1 = { //
  2.31796895172817957186950366121891420334577560424805e-01, // 0.000100
  4.28552413628423112257337379560340195894241333007812e-01, // 0.001000
  8.23248686345385172202782086969818919897079467773438e-01, // 0.010000
  1.74476956282491157956826555164298042654991149902344e+00, // 0.100000
  2.53532021190009304589807470620144158601760864257812e+00, // 0.250000
  3.67206074885089650550185069732833653688430786132812e+00, // 0.500000
  5.10942748512337896471535714226774871349334716796875e+00, // 0.750000
  6.68078306825586398787208963767625391483306884765625e+00, // 0.900000
  1.00451175148316149687843790161423385143280029296875e+01, // 0.990000
  1.30622407791880696947828255360946059226989746093750e+01, // 0.999000
  1.59138140006312944763067207532003521919250488281250e+01, // 0.999900
  };

  public static final double[] SCIPY_GAMMA_PROBIT_4_10 = { //
  2.31796895172818040453677213008631952106952667236328e-02, // 0.000100
  4.28552413628423001235034917044686153531074523925781e-02, // 0.001000
  8.23248686345385283225084549485472962260246276855469e-02, // 0.010000
  1.74476956282491157956826555164298042654991149902344e-01, // 0.100000
  2.53532021190009337896498209374840371310710906982422e-01, // 0.250000
  3.67206074885089661652415315984399057924747467041016e-01, // 0.500000
  5.10942748512338007493838176742428913712501525878906e-01, // 0.750000
  6.68078306825586554218432411289541050791740417480469e-01, // 0.900000
  1.00451175148316163010520085663301870226860046386719e+00, // 0.990000
  1.30622407791880723593180846364703029394149780273438e+00, // 0.999000
  1.59138140006312944763067207532003521919250488281250e+00, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_4_10 = { //
  2.31796895172817971064738173936348175629973411560059e-02, // 0.000100
  4.28552413628423140012912995189253706485033035278320e-02, // 0.001000
  8.23248686345385283225084549485472962260246276855469e-02, // 0.010000
  1.74476956282491157956826555164298042654991149902344e-01, // 0.100000
  2.53532021190009337896498209374840371310710906982422e-01, // 0.250000
  3.67206074885089661652415315984399057924747467041016e-01, // 0.500000
  5.10942748512337896471535714226774871349334716796875e-01, // 0.750000
  6.68078306825586443196129948773887008428573608398438e-01, // 0.900000
  1.00451175148316163010520085663301870226860046386719e+00, // 0.990000
  1.30622407791880701388720353861572220921516418457031e+00, // 0.999000
  1.59138140006312944763067207532003521919250488281250e+00, // 0.999900
  };

  public static final double[] SCIPY_GAMMA_PROBIT_01_10 = { //
  0.00000000000000000000000000000000000000000000000000e+00, // 0.000100
  0.00000000000000000000000000000000000000000000000000e+00, // 0.001000
  0.00000000000000000000000000000000000000000000000000e+00, // 0.010000
  6.07304836274677903746487345757596094421304488975011e-12, // 0.100000
  5.79171329496954621446304020682127600139210699126124e-08, // 0.250000
  5.93391104460224945785218331195665086852386593818665e-05, // 0.500000
  3.53063580735582700775854192443148349411785602569580e-03, // 0.750000
  2.66154553738837257315097417631477583199739456176758e-02, // 0.900000
  1.58847781792950559776045338367111980915069580078125e-01, // 0.990000
  3.36367701171875421728429955692263320088386535644531e-01, // 0.999000
  5.31624347769055760615231065457919612526893615722656e-01, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_01_10 = { //
  6.07304836240800246013734290758296395601191608171445e-42, // 0.000100
  6.07304836240794013868566283512457787341965380549669e-32, // 0.001000
  6.07304836240792099284182672275736116917595330090291e-22, // 0.010000
  6.07304836274317627815629288782017336338625579372774e-12, // 0.100000
  5.79171329496960180100020377028102736005621409276500e-08, // 0.250000
  5.93391104460226165512662377388153345236787572503090e-05, // 0.500000
  3.53063580735583307929070784325631393585354089736938e-03, // 0.750000
  2.66154553738837638954262132529038353823125362396240e-02, // 0.900000
  1.58847781792950504264894107109284959733486175537109e-01, // 0.990000
  3.36367701171875477239581186950090341269969940185547e-01, // 0.999000
  5.31624347769055760615231065457919612526893615722656e-01, // 0.999900
  };

  public static final double[] SCIPY_GAMMA_PROBIT_01_20 = { //
  0.00000000000000000000000000000000000000000000000000e+00, // 0.000100
  0.00000000000000000000000000000000000000000000000000e+00, // 0.001000
  0.00000000000000000000000000000000000000000000000000e+00, // 0.010000
  3.03652418137338951873243672878798047210652244487505e-12, // 0.100000
  2.89585664748477310723152010341063800069605349563062e-08, // 0.250000
  2.96695552230112472892609165597832543426193296909332e-05, // 0.500000
  1.76531790367791350387927096221574174705892801284790e-03, // 0.750000
  1.33077276869418628657548708815738791599869728088379e-02, // 0.900000
  7.94238908964752798880226691835559904575347900390625e-02, // 0.990000
  1.68183850585937710864214977846131660044193267822266e-01, // 0.999000
  2.65812173884527880307615532728959806263446807861328e-01, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_01_20 = { //
  3.03652418120400123006867145379148197800595804085722e-42, // 0.000100
  3.03652418120397006934283141756228893670982690274834e-32, // 0.001000
  3.03652418120396049642091336137868058458797665045146e-22, // 0.010000
  3.03652418137158813907814644391008668169312789686387e-12, // 0.100000
  2.89585664748480090050010188514051368002810704638250e-08, // 0.250000
  2.96695552230113082756331188694076672618393786251545e-05, // 0.500000
  1.76531790367791653964535392162815696792677044868469e-03, // 0.750000
  1.33077276869418819477131066264519176911562681198120e-02, // 0.900000
  7.94238908964752521324470535546424798667430877685547e-02, // 0.990000
  1.68183850585937738619790593475045170634984970092773e-01, // 0.999000
  2.65812173884527880307615532728959806263446807861328e-01, // 0.999900
  };

  public static final double[] SCIPY_GAMMA_PROBIT_01_4 = { //
  0.00000000000000000000000000000000000000000000000000e+00, // 0.000100
  0.00000000000000000000000000000000000000000000000000e+00, // 0.001000
  0.00000000000000000000000000000000000000000000000000e+00, // 0.010000
  1.51826209068669467858686166976238136189225613748022e-11, // 0.100000
  1.44792832374238655361576005170531900034802674781531e-07, // 0.250000
  1.48347776115056236446304582798916271713096648454666e-04, // 0.500000
  8.82658951838956665203461682267516152933239936828613e-03, // 0.750000
  6.65386384347093073898804505006410181522369384765625e-02, // 0.900000
  3.97119454482376343928962114659952931106090545654297e-01, // 0.990000
  8.40919252929688498809923657972831279039382934570312e-01, // 0.999000
  1.32906086942263934602692643238697201013565063476562e+00, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_01_4 = { //
  1.51826209060200048758698283629955882669254719901167e-41, // 0.000100
  1.51826209060198492519497318340481080243853975684947e-31, // 0.001000
  1.51826209060198020119068264779783997354452683633590e-21, // 0.010000
  1.51826209068579382720100313806021671836354869356001e-11, // 0.100000
  1.44792832374240031790115293408582886058866279199719e-07, // 0.250000
  1.48347776115056534601902016312635623762616887688637e-04, // 0.500000
  8.82658951838958226454590061393901123665273189544678e-03, // 0.750000
  6.65386384347094045343951052018383052200078964233398e-02, // 0.900000
  3.97119454482376232906659652144298888742923736572266e-01, // 0.990000
  8.40919252929688609832226120488485321402549743652344e-01, // 0.999000
  1.32906086942263934602692643238697201013565063476562e+00, // 0.999900
  };

  public static final double[] SCIPY_GAMMA_PROBIT_01_1 = { //
  0.00000000000000000000000000000000000000000000000000e+00, // 0.000100
  0.00000000000000000000000000000000000000000000000000e+00, // 0.001000
  0.00000000000000000000000000000000000000000000000000e+00, // 0.010000
  6.07304836274677871434744667904952544756902454992087e-11, // 0.100000
  5.79171329496954621446304020682127600139210699126124e-07, // 0.250000
  5.93391104460224945785218331195665086852386593818665e-04, // 0.500000
  3.53063580735582666081384672907006461173295974731445e-02, // 0.750000
  2.66154553738837229559521802002564072608947753906250e-01, // 0.900000
  1.58847781792950537571584845863981172442436218261719e+00, // 0.990000
  3.36367701171875399523969463189132511615753173828125e+00, // 0.999000
  5.31624347769055738410770572954788804054260253906250e+00, // 0.999900
  };

  public static final double[] GNUR_GAMMA_PROBIT_01_1 = { //
  6.07304836240800195034793134519823530677018879604667e-41, // 0.000100
  6.07304836240793970077989273361924320975415902739790e-31, // 0.001000
  6.07304836240792080476273059119135989417810734534360e-21, // 0.010000
  6.07304836274317530880401255224086687345419477424002e-11, // 0.100000
  5.79171329496960127160461173634331544235465116798878e-07, // 0.250000
  5.93391104460226138407608065250542495050467550754547e-04, // 0.500000
  3.53063580735583290581836024557560449466109275817871e-02, // 0.750000
  2.66154553738837618137580420807353220880031585693359e-01, // 0.900000
  1.58847781792950493162663860857719555497169494628906e+00, // 0.990000
  3.36367701171875443932890448195394128561019897460938e+00, // 0.999000
  5.31624347769055738410770572954788804054260253906250e+00, // 0.999900
  };

  @Test
  public void testGammaCDF() {
    GammaDistribution dist = new GammaDistribution(2., .25);

    double[] x = new double[] { 0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900 };
    // Quantiles computed using SciPy
    double[] q = new double[] { 7.978698632561770525176668422684400638900115154683589935302734375e-06, 7.7898328158386236606813834981721811345778405666351318359375e-04, 4.678840160444473761369721387382014654576778411865234375e-03, 1.7523096306421771795047703790260129608213901519775390625e-02, 6.1551935550104998340348316787640214897692203521728515625e-02, 9.081283153678469943770323880016803741455078125e-01, 9.0544695311360623435348315979354083538055419921875e-01, 9.008146339155584936264631323865614831447601318359375e-01, 8.926202950904051913738612711313180625438690185546875e-01, 8.7431087674245422380892023284104652702808380126953125e-01 };

    assertEquals("Testdata inconsistent!", x.length, q.length);

    double[] r = new double[x.length];
    for(int i = 0; i < x.length; i++) {
      r[i] = dist.cdf(x[i]);
    }
    assertArrayEquals("CDF values do not agree.", q, r, 1E-9);
  }

  @Test
  public void testGammaPDF() {
    // Fact
    checkDensity(1, 1, new double[] { -0.1 }, 0., new double[] { 0. });

    double[] x = new double[] { 1e-6, 0.5, 1, 2, 5 };
    // Compare to R:
    double rprec = 1e-10;
    // R2.5: print(dgamma(x, shape=1, rate=1), digits=22)
    checkDensity(1, 1, x, rprec, new double[] { 0.999999000000500015694627, 0.606530659712633424263117, 0.367879441171442334024277, 0.135335283236612702317814, 0.006737946999085467000845 });
    // R2.5: print(dgamma(x, shape=2, rate=1), digits=22)
    checkDensity(2, 1, x, rprec, new double[] { 9.999990000005007353745e-07, 3.032653298563167121316e-01, 3.678794411714423340243e-01, 2.706705664732254046356e-01, 3.368973499542733673895e-02 });
    // R2.5: print(dgamma(x, shape=4, rate=1), digits=22)
    checkDensity(4, 1, x, rprec, new double[] { 1.666665000000829403752e-19, 1.263605541067986358372e-02, 6.131324019524039131701e-02, 1.804470443154836400979e-01, 1.403738958142806136919e-01 });
    // R2.5: print(dgamma(x, shape=4, rate=10), digits=22)
    checkDensity(4, 10, x, rprec, new double[] { 1.666650000083330704830e-15, 1.403738958142806136919e+00, 7.566654960414147257364e-02, 2.748204829918078861929e-05, 4.018228849924835363352e-17 });
    // R2.5: print(dgamma(x, shape=.1, rate=10), digits=22)
    checkDensity(0.1, 10, x, rprec, new double[] { 3.323953832499025156721e+04, 1.663849009920152820577e-03, 6.007786726199894502100e-06, 1.461647647358158251307e-10, 5.996008322401351848641e-24 });
    // R2.5: print(dgamma(x, shape=.1, rate=20), digits=22)
    checkDensity(0.1, 20, x, rprec, new double[] { 3.562489883291303704027e+04, 1.201557345239978900420e-05, 2.923295294716316502614e-10, 3.228910842819033455040e-19, 1.239484588982581238066e-45 });
    // R2.5: print(dgamma(x, shape=.1, rate=4), digits=22)
    checkDensity(0.1, 4, x, rprec, new double[] { 3.032938387848289858084e+04, 3.049322494123417673362e-02, 2.211502311093181769724e-03, 2.170613370534063449151e-05, 5.846590589432632746734e-11 });
    // R2.5: print(dgamma(x, shape=.1, rate=1), digits=22)
    checkDensity(0.1, 1, x, rprec, new double[] { 2.640334142974315182073e+04, 1.189704436712996082903e-01, 3.866916944030238112440e-02, 7.623306235308544183404e-03, 1.663849009920152874787e-04 });

    // Compare to SciPy. We seem to be slightly closer here.
    double sprec = 1e-11;
    // SciPy: scipy.stats.gamma.pdf(x, 1, scale=1)
    checkDensity(1, 1, x, sprec, new double[] { 0.9999990000005000156946266542945522814989, 0.6065306597126334242631173765403218567371, 0.3678794411714423340242774429498240351677, 0.1353352832366127023178137278591748327017, 0.0067379469990854670008451066109955718275 });
    // SciPy: scipy.stats.gamma.pdf(x, 2, scale=1)
    checkDensity(2, 1, x, sprec, new double[] { 9.9999900000050115889094985016649630438224e-07, 3.0326532985631671213155868827016092836857e-01, 3.6787944117144233402427744294982403516769e-01, 2.7067056647322540463562745571834966540337e-01, 3.3689734995427336738949009031784953549504e-02 });
    // SciPy: scipy.stats.gamma.pdf(x, 4, scale=1)
    checkDensity(4, 1, x, sprec, new double[] { 1.6666650000008407185902795498312565830844e-19, 1.2636055410679865318446246646999497897923e-02, 6.1313240195240391317010875127380131743848e-02, 1.8044704431548355683112561109737725928426e-01, 1.4037389581428050266964646652922965586185e-01 });
    // SciPy: scipy.stats.gamma.pdf(x, 4, scale=.1)
    checkDensity(4, 10, x, sprec, new double[] { 1.6666500000833305076150329837580593211439e-15, 1.4037389581428050266964646652922965586185e+00, 7.5666549604141430940273949090624228119850e-02, 2.7482048299180785231156723402712316328689e-05, 4.0182288499248341307572205319201842464814e-17 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=.1)
    checkDensity(0.1, 10, x, sprec, new double[] { 3.3239538324990222463384270668029785156250e+04, 1.6638490099201526037364651244843116728589e-03, 6.0077867261998970431990073348682557252687e-06, 1.4616476473581587682949727001084161762123e-10, 5.9960083224013276040701882406618685420549e-24 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=.05)
    checkDensity(0.1, 20, x, sprec, new double[] { 3.5624898832913080696016550064086914062500e+04, 1.2015573452399794086398014669736511450537e-05, 2.9232952947163175365899454002168323524247e-10, 3.2289108428190170846350131604587708513477e-19, 1.2394845889826003738382963429888655907813e-45 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=.25)
    checkDensity(0.1, 4, x, sprec, new double[] { 3.0329383878482840373180806636810302734375e+04, 3.0493224941234166325276788711562403477728e-02, 2.2115023110931809023627092614106004475616e-03, 2.1706133705340624327111490043940023042524e-05, 5.8465905894326353316738322232548131021646e-11 });
    // SciPy: scipy.stats.gamma.pdf(x, .1, scale=1)
    checkDensity(0.1, 1, x, sprec, new double[] { 2.6403341429743133630836382508277893066406e+04, 1.1897044367129960829032597757759504020214e-01, 3.8669169440302374185502998216179548762739e-02, 7.6233062353085415813191971778906008694321e-03, 1.6638490099201526037364651244843116728589e-04 });
  }

  private void checkDensity(double alpha, double rate, double[] x, double prec, double[] expected) {
    GammaDistribution d = new GammaDistribution(alpha, rate);
    for(int i = 0; i < x.length; i++) {
      assertEquals(expected[i], d.pdf(x[i]), prec);
    }
  }

  @Test
  public void testProbit() {
    checkProbit(1., 1., P_PROBIT, SCIPY_GAMMA_PROBIT_1_1, 1e-14);
    checkProbit(2., 1., P_PROBIT, SCIPY_GAMMA_PROBIT_2_1, 1e-12);
    checkProbit(4., 1., P_PROBIT, SCIPY_GAMMA_PROBIT_4_1, 1e-13);
    checkProbit(4., 10, P_PROBIT, SCIPY_GAMMA_PROBIT_4_10, 1e-13);
    checkProbit(.1, 10, P_PROBIT, SCIPY_GAMMA_PROBIT_01_10, 1e-13);
    checkProbit(.1, 20, P_PROBIT, SCIPY_GAMMA_PROBIT_01_20, 1e-14);
    checkProbit(.1, 4., P_PROBIT, SCIPY_GAMMA_PROBIT_01_4, 1e-13);
    checkProbit(.1, 1., P_PROBIT, SCIPY_GAMMA_PROBIT_01_1, 1e-13);
    checkProbit(1., 1., P_PROBIT, GNUR_GAMMA_PROBIT_1_1, 1e-14);
    checkProbit(2., 1., P_PROBIT, GNUR_GAMMA_PROBIT_2_1, 1e-13);
    checkProbit(4., 1., P_PROBIT, GNUR_GAMMA_PROBIT_4_1, 1e-13);
    checkProbit(4., 10, P_PROBIT, GNUR_GAMMA_PROBIT_4_10, 1e-13);
    checkProbit(.1, 10, P_PROBIT, GNUR_GAMMA_PROBIT_01_10, 1e-13);
    checkProbit(.1, 20, P_PROBIT, GNUR_GAMMA_PROBIT_01_20, 1e-14);
    checkProbit(.1, 4., P_PROBIT, GNUR_GAMMA_PROBIT_01_4, 1e-13);
    checkProbit(.1, 1., P_PROBIT, GNUR_GAMMA_PROBIT_01_1, 1e-13);
  }

  private void checkProbit(double alpha, double rate, double[] x, double[] expected, double err) {
    GammaDistribution d = new GammaDistribution(alpha, rate);
    for(int i = 0; i < x.length; i++) {
      double val = d.probit(x[i]);
      if(val == expected[i]) {
        continue;
      }
      double diff = Math.abs(val - expected[i]);
      if(diff < err || diff / expected[i] < err) {
        continue;
      }
      final int errlev = (int) Math.ceil(Math.log(diff / expected[i]) / Math.log(10));
      assertEquals("Error magnitude: 1e" + errlev, expected[i], val, err);
    }
  }
}